//Keyboard = 0x01; //ErrorRollOver1 Sel N/A 3 3 3 4/101/104
//Keyboard = 0x02; //POSTFail1 Sel N/A 3 3 3 4/101/104
//Keyboard = 0x03; //ErrorUndefined1 Sel N/A 3 3 3 4/101/104
pub const KC_A: u8 = 0x04; //a and A2 Sel 31 3 3 3 4/101/104
pub const KC_B: u8 = 0x05; //b and B Sel 50 3 3 3 4/101/104
pub const KC_C: u8 = 0x06; //c and C2 Sel 48 3 3 3 4/101/104
pub const KC_D: u8 = 0x07; //d and D Sel 33 3 3 3 4/101/104
pub const KC_E: u8 = 0x08; //e and E Sel 19 3 3 3 4/101/104
pub const KC_F: u8 = 0x09; //f and F Sel 34 3 3 3 4/101/104
pub const KC_G: u8 = 0x0A; //g and G Sel 35 3 3 3 4/101/104
pub const KC_H: u8 = 0x0B; //h and H Sel 36 3 3 3 4/101/104
pub const KC_I: u8 = 0x0C; //i and I Sel 24 3 3 3 4/101/104
pub const KC_J: u8 = 0x0D; //j and J Sel 37 3 3 3 4/101/104
pub const KC_K: u8 = 0x0E; //k and K Sel 38 3 3 3 4/101/104
pub const KC_L: u8 = 0x0F; //l and L Sel 39 3 3 3 4/101/104
pub const KC_M: u8 = 0x10; //m and M2 Sel 52 3 3 3 4/101/104
pub const KC_N: u8 = 0x11; //n and N Sel 51 3 3 3 4/101/104
pub const KC_O: u8 = 0x12; //o and O2 Sel 25 3 3 3 4/101/104
pub const KC_P: u8 = 0x13; //p and P2 Sel 26 3 3 3 4/101/104
pub const KC_Q: u8 = 0x14; //q and Q2 Sel 17 3 3 3 4/101/104
pub const KC_R: u8 = 0x15; //r and R Sel 20 3 3 3 4/101/104
pub const KC_S: u8 = 0x16; //s and S Sel 32 3 3 3 4/101/104
pub const KC_T: u8 = 0x17; //t and T Sel 21 3 3 3 4/101/104
pub const KC_U: u8 = 0x18; //u and U Sel 23 3 3 3 4/101/104
pub const KC_V: u8 = 0x19; //v and V Sel 49 3 3 3 4/101/104
pub const KC_W: u8 = 0x1A; //w and W2 Sel 18 3 3 3 4/101/104
pub const KC_X: u8 = 0x1B; //x and X2 Sel 47 3 3 3 4/101/104
pub const KC_Y: u8 = 0x1C; //y and Y2 Sel 22 3 3 3 4/101/104
pub const KC_Z: u8 = 0x1D; //z and Z2 Sel 46 3 3 3 4/101/104
pub const KC_1: u8 = 0x1E; //1 and !2 Sel 2 3 3 3 4/101/104
pub const KC_2: u8 = 0x1F; //2 and @2 Sel 3 3 3 3 4/101/104
pub const KC_3: u8 = 0x20; //3 and #2 Sel 4 3 3 3 4/101/104
pub const KC_4: u8 = 0x21; //4 and $2 Sel 5 3 3 3 4/101/104
pub const KC_5: u8 = 0x22; //5 and %2 Sel 6 3 3 3 4/101/104
pub const KC_6: u8 = 0x23; //6 and ∧2 Sel 7 3 3 3 4/101/104
pub const KC_7: u8 = 0x24; //7 and &2 Sel 8 3 3 3 4/101/104
pub const KC_8: u8 = 0x25; //8 and *2 Sel 9 3 3 3 4/101/104
pub const KC_9: u8 = 0x26; //9 and (2 Sel 10 3 3 3 4/101/104
pub const KC_0: u8 = 0x27; //0 and )2 Sel 11 3 3 3 4/101/104
pub const KC_RET: u8 = 0x28; //Return (ENTER)3 Sel 43 3 3 3 4/101/104
pub const KC_ESC: u8 = 0x29; //ESCAPE Sel 110 3 3 3 4/101/104
pub const KC_DEL: u8 = 0x2A; //DELETE (Backspace)4 Sel 15 3 3 3 4/101/104
pub const KC_TAB: u8 = 0x2B; //Tab Sel 16 3 3 3 4/101/104
pub const KC_SPC: u8 = 0x2C; //Spacebar Sel 61 3 3 3 4/101/104
pub const KC_DASH: u8 = 0x2D; //- and (underscore)2 Sel 12 3 3 3 4/101/104
pub const KC_EQ: u8 = 0x2E; //= and +2 Sel 13 3 3 3 4/101/104
pub const KC_LBRC: u8 = 0x2F; //[ and {2 Sel 27 3 3 3 4/101/104
pub const KC_RBRC: u8 = 0x30; //] and }2 Sel 28 3 3 3 4/101/104
pub const KC_BSLS: u8 = 0x31; //\and | Sel 29 3 3 3 4/101/104
pub const KC_PND: u8 = 0x32; //Non-US # and ˜5 Sel 42 3 3 3 4/101/104
pub const KC_SEMC: u8 = 0x33; //; and :2 Sel 40 3 3 3 4/101/104
pub const KC_QUOT: u8 = 0x34; //‘ and “2 Sel 41 3 3 3 4/101/104
pub const KC_GRAV: u8 = 0x35; //Grave Accent and Tilde2 Sel 1 3 3 3 4/101/104
pub const KC_COMM: u8 = 0x36; //, and <2 Sel 53 3 3 3 4/101/104
pub const KC_DOT: u8 = 0x37; //. and >2 Sel 54 3 3 3 4/101/104
pub const KC_SLS: u8 = 0x38; /// and ?2 Sel 55 3 3 3 4/101/104
pub const KC_CAPS: u8 = 0x39; //Caps Lock6 Sel 30 3 3 3 4/101/104
pub const KC_F1: u8 = 0x3A; //F1 Sel 112 3 3 3 4/101/104
pub const KC_F2: u8 = 0x3B; //F2 Sel 113 3 3 3 4/101/104
pub const KC_F3: u8 = 0x3C; //F3 Sel 114 3 3 3 4/101/104
pub const KC_F4: u8 = 0x3D; //F4 Sel 115 3 3 3 4/101/104
pub const KC_F5: u8 = 0x3E; //F5 Sel 116 3 3 3 4/101/104
pub const KC_F6: u8 = 0x3F; //F6 Sel 117 3 3 3 4/101/104
pub const KC_F7: u8 = 0x40; //F7 Sel 118 3 3 3 4/101/104
pub const KC_F8: u8 = 0x41; //F8 Sel 119 3 3 3 4/101/104
pub const KC_F9: u8 = 0x42; //F9 Sel 120 3 3 3 4/101/104
pub const KC_F10: u8 = 0x43; //F10 Sel 121 3 3 3 4/101/104
pub const KC_F11: u8 = 0x44; //F11 Sel 122 3 3 3 4/101/104
pub const KC_F12: u8 = 0x45; //F12 Sel 123 3 3 3 4/101/104
pub const KC_PRNT: u8 = 0x46; //PrintScreen7 Sel 124 3 3 3 4/101/104
pub const KC_SCLK: u8 = 0x47; //Scroll Lock6 Sel 125 3 3 3 4/101/104
pub const KC_PAUS: u8 = 0x48; //Pause7 Sel 126 3 3 3 4/101/104
pub const KC_INS: u8 = 0x49; //Insert7 Sel 75 3 3 3 4/101/104
pub const KC_HOME: u8 = 0x4A; //Home7 Sel 80 3 3 3 4/101/104
pub const KC_PGUP: u8 = 0x4B; //PageUp7 Sel 85 3 3 3 4/101/104
pub const KC_DELF: u8 = 0x4C; //Delete Forward7,8 Sel 76 3 3 3 4/101/104
pub const KC_END: u8 = 0x4D; //End7 Sel 81 3 3 3 4/101/104
pub const KC_PGDN: u8 = 0x4E; //PageDown7 Sel 86 3 3 3 4/101/104
pub const KC_RARR: u8 = 0x4F; //RightArrow7 Sel 89 3 3 3 4/101/104
pub const KC_LARR: u8 = 0x50; //LeftArrow7 Sel 79 3 3 3 4/101/104
pub const KC_DARR: u8 = 0x51; //DownArrow7 Sel 84 3 3 3 4/101/104
pub const KC_UARR: u8 = 0x52; //UpArrow7 Sel 83 3 3 3 4/101/104
pub const KP_NUML: u8 = 0x53; //Num Lock and Clear6 Sel 90 3 3 3 4/101/104
pub const KP_7: u8 = 0x54; ///7 Sel 95 3 3 3 4/101/104
pub const KP_ASTR: u8 = 0x55; //* Sel 100 3 3 3 4/101/104
pub const KP_MINS: u8 = 0x56; //- Sel 105 3 3 3 4/101/104
pub const KP_PLUS: u8 = 0x57; //+ Sel 106 3 3 3 4/101/104
pub const KP_ENT: u8 = 0x58; //ENTER3 Sel 108 3 3 3 4/101/104
pub const KP_1: u8 = 0x59; //1 and End Sel 93 3 3 3 4/101/104
pub const KP_2: u8 = 0x5A; //2 and Down Arrow Sel 98 3 3 3 4/101/104
pub const KP_3: u8 = 0x5B; //3 and PageDn Sel 103 3 3 3 4/101/104
pub const KP_4: u8 = 0x5C; //4 and Left Arrow Sel 92 3 3 3 4/101/104
pub const KP_5: u8 = 0x5D; //5 Sel 97 3 3 3 4/101/104
pub const KP_6: u8 = 0x5E; //6 and Right Arrow Sel 102 3 3 3 4/101/104
pub const KP_7HME: u8 = 0x5F; //7 and Home Sel 91 3 3 3 4/101/104
pub const KP_8: u8 = 0x60; //8 and Up Arrow Sel 96 3 3 3 4/101/104
pub const KP_9: u8 = 0x61; //9 and PageUp Sel 101 3 3 3 4/101/104
pub const KP_0: u8 = 0x62; //0 and Insert Sel 99 3 3 3 4/101/104
pub const KP_DOT: u8 = 0x63; //. and Delete Sel 104 3 3 3 4/101/104
pub const KC_BSL2: u8 = 0x64; //Non-US \and |9,10 Sel 45 3 3 3 4/101/104
pub const KC_AP11: u8 = 0x65; //Application11 Sel 129 3 3 104
pub const KC_POW1: u8 = 0x66; //Power1 Sel 3 3
pub const KP_EQ: u8 = 0x67; //= Sel 3
pub const KC_F13: u8 = 0x68; //F13 Sel 3
pub const KC_F14: u8 = 0x69; //F14 Sel 3
pub const KC_F15: u8 = 0x6A; //F15 Sel 3
pub const KC_F16: u8 = 0x6B; //F16 Sel
pub const KC_F17: u8 = 0x6C; //F17 Sel
pub const KC_F18: u8 = 0x6D; //F18 Sel
pub const KC_F19: u8 = 0x6E; //F19 Sel
pub const KC_F20: u8 = 0x6F; //F20 Sel
pub const KC_F21: u8 = 0x70; //F21 Sel
pub const KC_F22: u8 = 0x71; //F22 Sel
pub const KC_F23: u8 = 0x72; //F23 Sel
pub const KC_F24: u8 = 0x73; //F24 Sel
pub const KC_EXECUTE: u8 = 0x74; //Execute Sel 3
pub const KC_HELP: u8 = 0x75; //Help Sel 3
pub const KC_MENU: u8 = 0x76; //Menu Sel 3
pub const KC_SELECT: u8 = 0x77; //Select Sel 3
pub const KC_STOP: u8 = 0x78; //Stop Sel 3
pub const KC_AGAIN: u8 = 0x79; //Again Sel 3
pub const KC_UNDO: u8 = 0x7A; //Undo Sel 3
pub const KC_CUT: u8 = 0x7B; //Cut Sel 3
pub const KC_COPY: u8 = 0x7C; //Copy Sel 3
pub const KC_PAST: u8 = 0x7D; //Paste Sel 3
pub const KC_FIND: u8 = 0x7E; //Find Sel 3
pub const KC_MUTE: u8 = 0x7F; //Mute Sel 3
pub const KC_VOUP: u8 = 0x80; //Volume Up Sel 3
pub const KC_VODN: u8 = 0x81; //Volume Down Sel 3
pub const KC_LOCKING_CAPS: u8 = 0x82; //Locking Caps Lock12 Sel 3
pub const KC_LOCKING_NUM: u8 = 0x83; //Locking Num Lock12 Sel 3
pub const KC_LOCKING_SCROLL: u8 = 0x84; //Locking Scroll Lock12 Sel 3
pub const KP_COMMA13: u8 = 0x85; //Comma13 Sel 107
pub const KP_EQUAL: u8 = 0x86; //Equal Sign14 Sel 3
pub const KC_INTERNATIONAL115: u8 = 0x87; //International115,16 Sel 56
pub const KC_INTERNATIONAL217: u8 = 0x88; //International217 Sel
pub const KC_INTERNATIONAL318: u8 = 0x89; //International318 Sel
pub const KC_INTERNATIONAL419: u8 = 0x8A; //International419 Sel
pub const KC_INTERNATIONAL520: u8 = 0x8B; //International520 Sel
pub const KC_INTERNATIONAL621: u8 = 0x8C; //International621 Sel
pub const KC_INTERNATIONAL722: u8 = 0x8D; //International722 Sel
pub const KC_INTERNATIONAL823: u8 = 0x8E; //International823 Sel
pub const KC_INTERNATIONAL923: u8 = 0x8F; //International923 Sel
pub const KC_LANG124: u8 = 0x90; //LANG124 Sel
pub const KC_LANG225: u8 = 0x91; //LANG225 Sel
pub const KC_LANG326: u8 = 0x92; //LANG326 Sel
pub const KC_LANG427: u8 = 0x93; //LANG427 Sel
pub const KC_LANG528: u8 = 0x94; //LANG528 Sel
pub const KC_LANG629: u8 = 0x95; //LANG629 Sel
pub const KC_LANG729: u8 = 0x96; //LANG729 Sel
pub const KC_LANG829: u8 = 0x97; //LANG829 Sel
pub const KC_LANG929: u8 = 0x98; //LANG929 Sel
pub const KC_ALTERNATE_ERASE_30: u8 = 0x99; //Alternate Erase30 Sel
pub const KC_SYSREQ: u8 = 0x9A; //SysReq/Attention7 Sel
pub const KC_CANCEL: u8 = 0x9B; //Cancel Sel
pub const KC_CLEAR: u8 = 0x9C; //Clear Sel
pub const KC_PRIOR: u8 = 0x9D; //Prior Sel
pub const KC_RETURN: u8 = 0x9E; //Return Sel
pub const KC_SEPARATOR: u8 = 0x9F; //Separator Sel
pub const KC_OUT: u8 = 0xA0; //Out Sel
pub const KC_OPER: u8 = 0xA1; //Oper Sel
pub const KC_CLEAR_AGAIN: u8 = 0xA2; //Clear/Again Sel
pub const KC_CRSEL: u8 = 0xA3; //CrSel/Props Sel
pub const KC_EXSEL: u8 = 0xA4; //ExSel Sel
pub const KP_00: u8 = 0xB0; //00 Sel
pub const KP_000: u8 = 0xB1; //000 Sel
pub const SP_THOUSANDS: u8 = 0xB2; //Separator31 Sel
pub const SP_DECIMAL: u8 = 0xB3; //Separator31 Sel
pub const UN_CURRENCY: u8 = 0xB4; //Unit32 Sel
pub const UN_CURRENCY_SUB: u8 = 0xB5; //Sub-unit32 Sel
pub const KP_LEFT_PARENS: u8 = 0xB6; //( Sel
pub const KP_RIGHT_PARENS: u8 = 0xB7; //) Sel
pub const KP_LEFT_CURLY_BRACKET: u8 = 0xB8; //{ Sel
pub const KP_RIGHT_CURLY_BRACKET: u8 = 0xB9; //} Sel
pub const KP_TAB: u8 = 0xBA; //Tab Sel
pub const KP_BACKSPACE: u8 = 0xBB; //Backspace Sel
pub const KP_A: u8 = 0xBC; //A Sel
pub const KP_B: u8 = 0xBD; //B Sel
pub const KP_C: u8 = 0xBE; //C Sel
pub const KP_D: u8 = 0xBF; //D Sel
pub const KP_E: u8 = 0xC0; //E Sel
pub const KP_F: u8 = 0xC1; //F Sel
pub const KP_XOR: u8 = 0xC2; //XOR Sel
pub const KP_CIRCUMFLEX: u8 = 0xC3; //∧ Sel
pub const KP_PERCENTAGE: u8 = 0xC4; //% Sel
pub const KP_LEFT_ANGLE_BRACKET: u8 = 0xC5; //< Sel
pub const KP_RIGHT_ANGLE_BRACKET: u8 = 0xC6; //> Sel
pub const KP_AMPERSAND: u8 = 0xC7;//& Sel
pub const KP_DOUBLE_AMPERSAND: u8 = 0xC8; //&& Sel
pub const KP_PIPE: u8 = 0xC9; //| Sel
pub const KP_DOUBLE_PIPE: u8 = 0xCA; //|| Sel
pub const KP_COLON: u8 = 0xCB; //: Sel
pub const KP_POUND: u8 = 0xCC; //# Sel
pub const KP_SPACE: u8 = 0xCD; //Space Sel
pub const KP_AT: u8 = 0xCE; //@ Sel
pub const KP_EXCLAMATION_MARK: u8 = 0xCF; // ! Sel
pub const KP_MEM_STORE: u8 = 0xD0; //Memory Store Sel
pub const KP_MEM_RECALL: u8 = 0xD1; //Memory Recall Sel
pub const KP_MEM_CLEAR: u8 = 0xD2; //Memory Clear Sel
pub const KP_MEM_ADD: u8 = 0xD3; //Memory Add Sel
pub const KP_MEM_SUB: u8 = 0xD4; //Memory Subtract Sel
pub const KP_MEM_MULT: u8 = 0xD5; //Memory Multiply Sel
pub const KP_MEM_DIV: u8 = 0xD6; //Memory Divide Sel
pub const KP_PLUS_MINS: u8 = 0xD7; //+/- Sel
pub const KP_CLEAR: u8 = 0xD8; //Clear Sel
pub const KP_CLEAR_ENTRY: u8 = 0xD9; //Clear Entry Sel
pub const KP_BINARY: u8 = 0xDA; //Binary Sel
pub const KP_OCTAL: u8 = 0xDB; //Octal Sel
pub const KP_DECIMAL: u8 = 0xDC; //Decimal Sel
pub const KP_HEXADECIMAL: u8 = 0xDD; //Hexadecimal Sel
pub const KC_LCTRL: u8 = 0xE0; //LeftControl DV 58 3 3 3 4/101/104
pub const KC_LSHIFT: u8 = 0xE1; //LeftShift DV 44 3 3 3 4/101/104
pub const KC_LALT: u8 = 0xE2; //LeftAlt DV 60 3 3 3 4/101/104
pub const KC_LGUI: u8 = 0xE3; //Left GUI11,33 DV 127 3 3 3 104
pub const KC_RCRTL: u8 = 0xE4; //RightControl DV 64 3 3 3 101/104
pub const KC_RSHIFT: u8 = 0xE5; //RightShift DV 57 3 3 3 4/101/104
pub const KC_RALT: u8 = 0xE6; //RightAlt DV 62 3 3 3 101/104
pub const KC_RGUI: u8 = 0xE7; //Right GUI11,34 DV 128 3 3 3 104
