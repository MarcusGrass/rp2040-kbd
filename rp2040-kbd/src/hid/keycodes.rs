#[repr(transparent)]
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub struct KeyCode(pub u8);

impl KeyCode {
    //Keyboard = 0x01; //ErrorRollOver1 Sel N/A 3 3 3 4/101/104
    //Keyboard = 0x02; //POSTFail1 Sel N/A 3 3 3 4/101/104
    //Keyboard = 0x03; //ErrorUndefined1 Sel N/A 3 3 3 4/101/104
    pub const A: Self = Self(0x04); //a and A2 Sel 31 3 3 3 4/101/104
    pub const B: Self = Self(0x05); //b and B Sel 50 3 3 3 4/101/104
    pub const C: Self = Self(0x06); //c and C2 Sel 48 3 3 3 4/101/104
    pub const D: Self = Self(0x07); //d and D Sel 33 3 3 3 4/101/104
    pub const E: Self = Self(0x08); //e and E Sel 19 3 3 3 4/101/104
    pub const F: Self = Self(0x09); //f and F Sel 34 3 3 3 4/101/104
    pub const G: Self = Self(0x0A); //g and G Sel 35 3 3 3 4/101/104
    pub const H: Self = Self(0x0B); //h and H Sel 36 3 3 3 4/101/104
    pub const I: Self = Self(0x0C); //i and I Sel 24 3 3 3 4/101/104
    pub const J: Self = Self(0x0D); //j and J Sel 37 3 3 3 4/101/104
    pub const K: Self = Self(0x0E); //k and K Sel 38 3 3 3 4/101/104
    pub const L: Self = Self(0x0F); //l and L Sel 39 3 3 3 4/101/104
    pub const M: Self = Self(0x10); //m and M2 Sel 52 3 3 3 4/101/104
    pub const N: Self = Self(0x11); //n and N Sel 51 3 3 3 4/101/104
    pub const O: Self = Self(0x12); //o and O2 Sel 25 3 3 3 4/101/104
    pub const P: Self = Self(0x13); //p and P2 Sel 26 3 3 3 4/101/104
    pub const Q: Self = Self(0x14); //q and Q2 Sel 17 3 3 3 4/101/104
    pub const R: Self = Self(0x15); //r and R Sel 20 3 3 3 4/101/104
    pub const S: Self = Self(0x16); //s and S Sel 32 3 3 3 4/101/104
    pub const T: Self = Self(0x17); //t and T Sel 21 3 3 3 4/101/104
    pub const U: Self = Self(0x18); //u and U Sel 23 3 3 3 4/101/104
    pub const V: Self = Self(0x19); //v and V Sel 49 3 3 3 4/101/104
    pub const W: Self = Self(0x1A); //w and W2 Sel 18 3 3 3 4/101/104
    pub const X: Self = Self(0x1B); //x and X2 Sel 47 3 3 3 4/101/104
    pub const Y: Self = Self(0x1C); //y and Y2 Sel 22 3 3 3 4/101/104
    pub const Z: Self = Self(0x1D); //z and Z2 Sel 46 3 3 3 4/101/104
    pub const N1: Self = Self(0x1E); //1 and !2 Sel 2 3 3 3 4/101/104
    pub const N2: Self = Self(0x1F); //2 and @2 Sel 3 3 3 3 4/101/104
    pub const N3: Self = Self(0x20); //3 and #2 Sel 4 3 3 3 4/101/104
    pub const N4: Self = Self(0x21); //4 and $2 Sel 5 3 3 3 4/101/104
    pub const N5: Self = Self(0x22); //5 and %2 Sel 6 3 3 3 4/101/104
    pub const KC_6: Self = Self(0x23); //6 and ∧2 Sel 7 3 3 3 4/101/104
    pub const KC_7: Self = Self(0x24); //7 and &2 Sel 8 3 3 3 4/101/104
    pub const KC_8: Self = Self(0x25); //8 and *2 Sel 9 3 3 3 4/101/104
    pub const KC_9: Self = Self(0x26); //9 and (2 Sel 10 3 3 3 4/101/104
    pub const N0: Self = Self(0x27); //0 and )2 Sel 11 3 3 3 4/101/104
    pub const ENTER: Self = Self(0x28); //Return (ENTER)3 Sel 43 3 3 3 4/101/104
    pub const ESCAPE: Self = Self(0x29); //ESCAPE Sel 110 3 3 3 4/101/104
    pub const BACKSPACE: Self = Self(0x2A); //DELETE (Backspace)4 Sel 15 3 3 3 4/101/104
    pub const KC_TAB: Self = Self(0x2B); //Tab Sel 16 3 3 3 4/101/104
    pub const SPACE: Self = Self(0x2C); //Spacebar Sel 61 3 3 3 4/101/104
    pub const KC_DASH: Self = Self(0x2D); //- and (underscore)2 Sel 12 3 3 3 4/101/104
    pub const KC_EQ: Self = Self(0x2E); //= and +2 Sel 13 3 3 3 4/101/104
    pub const KC_LBRC: Self = Self(0x2F); //[ and {2 Sel 27 3 3 3 4/101/104
    pub const KC_RBRC: Self = Self(0x30); //] and }2 Sel 28 3 3 3 4/101/104
    pub const BACKSLASH: Self = Self(0x31); //\and | Sel 29 3 3 3 4/101/104
    pub const KC_PND: Self = Self(0x32); //Non-US # and ˜5 Sel 42 3 3 3 4/101/104
    pub const SEMICOLON: Self = Self(0x33); //; and :2 Sel 40 3 3 3 4/101/104
    pub const KC_QUOT: Self = Self(0x34); //‘ and “2 Sel 41 3 3 3 4/101/104
    pub const KC_GRAV: Self = Self(0x35); //Grave Accent and Tilde2 Sel 1 3 3 3 4/101/104
    pub const COMMA: Self = Self(0x36); //, and <2 Sel 53 3 3 3 4/101/104
    pub const DOT: Self = Self(0x37); //. and >2 Sel 54 3 3 3 4/101/104
    pub const KC_SLS: Self = Self(0x38);
    /// and ?2 Sel 55 3 3 3 4/101/104
    pub const KC_CAPS: Self = Self(0x39); //Caps Lock6 Sel 30 3 3 3 4/101/104
    pub const KC_F1: Self = Self(0x3A); //F1 Sel 112 3 3 3 4/101/104
    pub const KC_F2: Self = Self(0x3B); //F2 Sel 113 3 3 3 4/101/104
    pub const KC_F3: Self = Self(0x3C); //F3 Sel 114 3 3 3 4/101/104
    pub const KC_F4: Self = Self(0x3D); //F4 Sel 115 3 3 3 4/101/104
    pub const KC_F5: Self = Self(0x3E); //F5 Sel 116 3 3 3 4/101/104
    pub const KC_F6: Self = Self(0x3F); //F6 Sel 117 3 3 3 4/101/104
    pub const KC_F7: Self = Self(0x40); //F7 Sel 118 3 3 3 4/101/104
    pub const KC_F8: Self = Self(0x41); //F8 Sel 119 3 3 3 4/101/104
    pub const KC_F9: Self = Self(0x42); //F9 Sel 120 3 3 3 4/101/104
    pub const KC_F10: Self = Self(0x43); //F10 Sel 121 3 3 3 4/101/104
    pub const KC_F11: Self = Self(0x44); //F11 Sel 122 3 3 3 4/101/104
    pub const KC_F12: Self = Self(0x45); //F12 Sel 123 3 3 3 4/101/104
    pub const KC_PRNT: Self = Self(0x46); //PrintScreen7 Sel 124 3 3 3 4/101/104
    pub const KC_SCLK: Self = Self(0x47); //Scroll Lock6 Sel 125 3 3 3 4/101/104
    pub const KC_PAUS: Self = Self(0x48); //Pause7 Sel 126 3 3 3 4/101/104
    pub const KC_INS: Self = Self(0x49); //Insert7 Sel 75 3 3 3 4/101/104
    pub const KC_HOME: Self = Self(0x4A); //Home7 Sel 80 3 3 3 4/101/104
    pub const KC_PGUP: Self = Self(0x4B); //PageUp7 Sel 85 3 3 3 4/101/104
    pub const KC_DELF: Self = Self(0x4C); //Delete Forward7,8 Sel 76 3 3 3 4/101/104
    pub const KC_END: Self = Self(0x4D); //End7 Sel 81 3 3 3 4/101/104
    pub const KC_PGDN: Self = Self(0x4E); //PageDown7 Sel 86 3 3 3 4/101/104
    pub const KC_RARR: Self = Self(0x4F); //RightArrow7 Sel 89 3 3 3 4/101/104
    pub const KC_LARR: Self = Self(0x50); //LeftArrow7 Sel 79 3 3 3 4/101/104
    pub const KC_DARR: Self = Self(0x51); //DownArrow7 Sel 84 3 3 3 4/101/104
    pub const KC_UARR: Self = Self(0x52); //UpArrow7 Sel 83 3 3 3 4/101/104
    pub const KP_NUML: Self = Self(0x53); //Num Lock and Clear6 Sel 90 3 3 3 4/101/104
    pub const KP_7: Self = Self(0x54);
    ///7 Sel 95 3 3 3 4/101/104
    pub const KP_ASTR: Self = Self(0x55); //* Sel 100 3 3 3 4/101/104
    pub const KP_MINS: Self = Self(0x56); //- Sel 105 3 3 3 4/101/104
    pub const KP_PLUS: Self = Self(0x57); //+ Sel 106 3 3 3 4/101/104
    pub const KP_ENT: Self = Self(0x58); //ENTER3 Sel 108 3 3 3 4/101/104
    pub const KP_1: Self = Self(0x59); //1 and End Sel 93 3 3 3 4/101/104
    pub const KP_2: Self = Self(0x5A); //2 and Down Arrow Sel 98 3 3 3 4/101/104
    pub const KP_3: Self = Self(0x5B); //3 and PageDn Sel 103 3 3 3 4/101/104
    pub const KP_4: Self = Self(0x5C); //4 and Left Arrow Sel 92 3 3 3 4/101/104
    pub const KP_5: Self = Self(0x5D); //5 Sel 97 3 3 3 4/101/104
    pub const KP_6: Self = Self(0x5E); //6 and Right Arrow Sel 102 3 3 3 4/101/104
    pub const KP_7HME: Self = Self(0x5F); //7 and Home Sel 91 3 3 3 4/101/104
    pub const KP_8: Self = Self(0x60); //8 and Up Arrow Sel 96 3 3 3 4/101/104
    pub const KP_9: Self = Self(0x61); //9 and PageUp Sel 101 3 3 3 4/101/104
    pub const KP_0: Self = Self(0x62); //0 and Insert Sel 99 3 3 3 4/101/104
    pub const KP_DOT: Self = Self(0x63); //. and Delete Sel 104 3 3 3 4/101/104
    pub const NON_US_BACKSLASH: Self = Self(0x64); //Non-US \and |9,10 Sel 45 3 3 3 4/101/104
    pub const KC_AP11: Self = Self(0x65); //Application11 Sel 129 3 3 104
    pub const KC_POW1: Self = Self(0x66); //Power1 Sel 3 3
    pub const KP_EQ: Self = Self(0x67); //= Sel 3
    pub const KC_F13: Self = Self(0x68); //F13 Sel 3
    pub const KC_F14: Self = Self(0x69); //F14 Sel 3
    pub const KC_F15: Self = Self(0x6A); //F15 Sel 3
    pub const KC_F16: Self = Self(0x6B); //F16 Sel
    pub const KC_F17: Self = Self(0x6C); //F17 Sel
    pub const KC_F18: Self = Self(0x6D); //F18 Sel
    pub const KC_F19: Self = Self(0x6E); //F19 Sel
    pub const KC_F20: Self = Self(0x6F); //F20 Sel
    pub const KC_F21: Self = Self(0x70); //F21 Sel
    pub const KC_F22: Self = Self(0x71); //F22 Sel
    pub const KC_F23: Self = Self(0x72); //F23 Sel
    pub const KC_F24: Self = Self(0x73); //F24 Sel
    pub const KC_EXECUTE: Self = Self(0x74); //Execute Sel 3
    pub const KC_HELP: Self = Self(0x75); //Help Sel 3
    pub const KC_MENU: Self = Self(0x76); //Menu Sel 3
    pub const KC_SELECT: Self = Self(0x77); //Select Sel 3
    pub const KC_STOP: Self = Self(0x78); //Stop Sel 3
    pub const KC_AGAIN: Self = Self(0x79); //Again Sel 3
    pub const KC_UNDO: Self = Self(0x7A); //Undo Sel 3
    pub const KC_CUT: Self = Self(0x7B); //Cut Sel 3
    pub const KC_COPY: Self = Self(0x7C); //Copy Sel 3
    pub const KC_PAST: Self = Self(0x7D); //Paste Sel 3
    pub const KC_FIND: Self = Self(0x7E); //Find Sel 3
    pub const KC_MUTE: Self = Self(0x7F); //Mute Sel 3
    pub const KC_VOUP: Self = Self(0x80); //Volume Up Sel 3
    pub const KC_VODN: Self = Self(0x81); //Volume Down Sel 3
    pub const KC_LOCKING_CAPS: Self = Self(0x82); //Locking Caps Lock12 Sel 3
    pub const KC_LOCKING_NUM: Self = Self(0x83); //Locking Num Lock12 Sel 3
    pub const KC_LOCKING_SCROLL: Self = Self(0x84); //Locking Scroll Lock12 Sel 3
    pub const KP_COMMA13: Self = Self(0x85); //Comma13 Sel 107
    pub const KP_EQUAL: Self = Self(0x86); //Equal Sign14 Sel 3
    pub const KC_INTERNATIONAL115: Self = Self(0x87); //International115,16 Sel 56
    pub const KC_INTERNATIONAL217: Self = Self(0x88); //International217 Sel
    pub const KC_INTERNATIONAL318: Self = Self(0x89); //International318 Sel
    pub const KC_INTERNATIONAL419: Self = Self(0x8A); //International419 Sel
    pub const KC_INTERNATIONAL520: Self = Self(0x8B); //International520 Sel
    pub const KC_INTERNATIONAL621: Self = Self(0x8C); //International621 Sel
    pub const KC_INTERNATIONAL722: Self = Self(0x8D); //International722 Sel
    pub const KC_INTERNATIONAL823: Self = Self(0x8E); //International823 Sel
    pub const KC_INTERNATIONAL923: Self = Self(0x8F); //International923 Sel
    pub const KC_LANG124: Self = Self(0x90); //LANG124 Sel
    pub const KC_LANG225: Self = Self(0x91); //LANG225 Sel
    pub const KC_LANG326: Self = Self(0x92); //LANG326 Sel
    pub const KC_LANG427: Self = Self(0x93); //LANG427 Sel
    pub const KC_LANG528: Self = Self(0x94); //LANG528 Sel
    pub const KC_LANG629: Self = Self(0x95); //LANG629 Sel
    pub const KC_LANG729: Self = Self(0x96); //LANG729 Sel
    pub const KC_LANG829: Self = Self(0x97); //LANG829 Sel
    pub const KC_LANG929: Self = Self(0x98); //LANG929 Sel
    pub const KC_ALTERNATE_ERASE_30: Self = Self(0x99); //Alternate Erase30 Sel
    pub const KC_SYSREQ: Self = Self(0x9A); //SysReq/Attention7 Sel
    pub const KC_CANCEL: Self = Self(0x9B); //Cancel Sel
    pub const KC_CLEAR: Self = Self(0x9C); //Clear Sel
    pub const KC_PRIOR: Self = Self(0x9D); //Prior Sel
    pub const KC_RETURN: Self = Self(0x9E); //Return Sel
    pub const KC_SEPARATOR: Self = Self(0x9F); //Separator Sel
    pub const KC_OUT: Self = Self(0xA0); //Out Sel
    pub const KC_OPER: Self = Self(0xA1); //Oper Sel
    pub const KC_CLEAR_AGAIN: Self = Self(0xA2); //Clear/Again Sel
    pub const KC_CRSEL: Self = Self(0xA3); //CrSel/Props Sel
    pub const KC_EXSEL: Self = Self(0xA4); //ExSel Sel
    pub const KP_00: Self = Self(0xB0); //00 Sel
    pub const KP_000: Self = Self(0xB1); //000 Sel
    pub const SP_THOUSANDS: Self = Self(0xB2); //Separator31 Sel
    pub const SP_DECIMAL: Self = Self(0xB3); //Separator31 Sel
    pub const UN_CURRENCY: Self = Self(0xB4); //Unit32 Sel
    pub const UN_CURRENCY_SUB: Self = Self(0xB5); //Sub-unit32 Sel
    pub const KP_LEFT_PARENS: Self = Self(0xB6); //( Sel
    pub const KP_RIGHT_PARENS: Self = Self(0xB7); //) Sel
    pub const KP_LEFT_CURLY_BRACKET: Self = Self(0xB8); //{ Sel
    pub const KP_RIGHT_CURLY_BRACKET: Self = Self(0xB9); //} Sel
    pub const KP_TAB: Self = Self(0xBA); //Tab Sel
    pub const KP_BACKSPACE: Self = Self(0xBB); //Backspace Sel
    pub const KP_A: Self = Self(0xBC); //A Sel
    pub const KP_B: Self = Self(0xBD); //B Sel
    pub const KP_C: Self = Self(0xBE); //C Sel
    pub const KP_D: Self = Self(0xBF); //D Sel
    pub const KP_E: Self = Self(0xC0); //E Sel
    pub const KP_F: Self = Self(0xC1); //F Sel
    pub const KP_XOR: Self = Self(0xC2); //XOR Sel
    pub const KP_CIRCUMFLEX: Self = Self(0xC3); //∧ Sel
    pub const KP_PERCENTAGE: Self = Self(0xC4); //% Sel
    pub const KP_LEFT_ANGLE_BRACKET: Self = Self(0xC5); //< Sel
    pub const KP_RIGHT_ANGLE_BRACKET: Self = Self(0xC6); //> Sel
    pub const KP_AMPERSAND: Self = Self(0xC7); //& Sel
    pub const KP_DOUBLE_AMPERSAND: Self = Self(0xC8); //&& Sel
    pub const KP_PIPE: Self = Self(0xC9); //| Sel
    pub const KP_DOUBLE_PIPE: Self = Self(0xCA); //|| Sel
    pub const KP_COLON: Self = Self(0xCB); //: Sel
    pub const KP_POUND: Self = Self(0xCC); //# Sel
    pub const KP_SPACE: Self = Self(0xCD); //Space Sel
    pub const KP_AT: Self = Self(0xCE); //@ Sel
    pub const KP_EXCLAMATION_MARK: Self = Self(0xCF); // ! Sel
    pub const KP_MEM_STORE: Self = Self(0xD0); //Memory Store Sel
    pub const KP_MEM_RECALL: Self = Self(0xD1); //Memory Recall Sel
    pub const KP_MEM_CLEAR: Self = Self(0xD2); //Memory Clear Sel
    pub const KP_MEM_ADD: Self = Self(0xD3); //Memory Add Sel
    pub const KP_MEM_SUB: Self = Self(0xD4); //Memory Subtract Sel
    pub const KP_MEM_MULT: Self = Self(0xD5); //Memory Multiply Sel
    pub const KP_MEM_DIV: Self = Self(0xD6); //Memory Divide Sel
    pub const KP_PLUS_MINS: Self = Self(0xD7); //+/- Sel
    pub const KP_CLEAR: Self = Self(0xD8); //Clear Sel
    pub const KP_CLEAR_ENTRY: Self = Self(0xD9); //Clear Entry Sel
    pub const KP_BINARY: Self = Self(0xDA); //Binary Sel
    pub const KP_OCTAL: Self = Self(0xDB); //Octal Sel
    pub const KP_DECIMAL: Self = Self(0xDC); //Decimal Sel
    pub const KP_HEXADECIMAL: Self = Self(0xDD); //Hexadecimal Sel
}

#[repr(transparent)]
#[derive(Copy, Clone, Debug)]
pub struct Modifier(pub u8);

impl Modifier {
    pub const LEFT_CONTROL: Self = Self(0b0000_0001); //LeftControl DV 58 3 3 3 4/101/104
    pub const LEFT_SHIFT: Self = Self(0b0000_0010); //LeftShift DV 44 3 3 3 4/101/104
    pub const LEFT_ALT: Self = Self(0b0000_0100); //LeftAlt DV 60 3 3 3 4/101/104
    pub const LEFT_GUI: Self = Self(0b0000_1000); //Left GUI11,33 DV 127 3 3 3 104
    pub const RIGHT_CONTROL: Self = Self(0b0001_0000); //RightControl DV 64 3 3 3 101/104
    pub const KC_RSHIFT: Self = Self(0b0010_0000); //RightShift DV 57 3 3 3 4/101/104
    pub const RIGHT_ALT: Self = Self(0b0100_0000); //RightAlt DV 62 3 3 3 101/104
    pub const KC_RGUI: Self = Self(0b1000_0000); //Right GUI11,34 DV 128 3 3 3 104

    pub const ANY_SHIFT: Self = Self(Self::KC_RSHIFT.0 | Self::LEFT_SHIFT.0);
}
